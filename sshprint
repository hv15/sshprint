#!/usr/bin/env zsh
# This is a little hackish script to print stuff to CUPS printers
# from anywhere ...
#
# Written by: Hans-Nikolai Viessmann (C) 2015
# Dependencies: zsh, lpr, lpstat, and awk (maybe some more...)

# Modules
zmodload zsh/zutil

# Variables
typeset VERSION="1.2.0-beta"
typeset -A ARGS
typeset FILE
typeset PRINTER
typeset -a PRINTERS
typeset CONFIG=~/.config/sshprint/config
typeset USAGE="$(basename "$0") [-h | --help] [-V | --version] [-D | --set-default <printer_name>] [-r | --refresh-printers] [-p | --list-printers]  [-P <printer_name>] {--file} <file>"
typeset HELP="Usage: $USAGE
Options:
  -h, --help              Print this help message and exit
  -V, --version           Print version and exit
  -r, --refresh-printers  Refresh list of printers in config  
  -p, --list-printers     Print a list of printers
  -D=<printer_name>       Write default printer to config file
  -P=<printer_name>       Specify <printer_name> to print to
  --file=<file>, <file>   File to be printed"

function parse_args()
{
    zparseopts -E -D -A ARGS -- h -help V -version r -refresh-printers p -list-printers D: P: -file: 
   
    if ((${+ARGS[--help]})); then
        echo -e "$HELP" 1>&2
        exit
    fi
    if ((${+ARGS[-h]})); then
        echo "Usage: $USAGE" 1>&2
        echo "Try \`--help' for more details" 1>&2
        exit
    fi
    if ((${+ARGS[-V]} || ${+ARGS[--version]})); then
        echo "Version: ${VERSION}"
        exit
    fi
    if ((${+ARGS[-D]})); then
        load_config
        if [ -z "$DEFAULTP" -o "$DEFAULTP" != "${ARGS[-D]}" ]; then
            DEFAULTP="${ARGS[-D]}"
            save_config
            echo "Default printer set as \`${ARGS[-D]}'"
        else
            echo "Printer already set...Aborting!" 1>&2
        fi
        exit
    fi
    if ((${+ARGS[-r]} || ${+ARGS[--refresh]})); then
        echo "Rereshing list..."
        load_config
        get_printer_list
        save_config
        exit
    fi
    if ((${+ARGS[-p]} || ${+ARGS[--list-printers]})); then
        load_config
        for (( i = 1; i < ${#PRINTERS}; i++)) do
            echo "${PRINTERS[$i]}";
        done
        exit
    fi
    if ((${+ARGS[-P]})); then
        PRINTER="${ARGS[-P]}"
    fi
    if ((${+ARGS[--file]})); then
        FILE="${ARGS[--file]}"
    elif (( $#@ > 0 )); then
        FILE="$1"
    else
        echo "Usage: $USAGE" 1>&2
        echo "You haven't specified a file to be printed...Aborting!" 1>&2
        exit
    fi

    if [[ ! -e "${FILE:A}" ]]; then
        echo "File ${FILE:A} does not exist...Aborting!" 1>&2
        exit
    fi
}

function load_config()
{
    if [[ ! -e "${CONFIG:A}" ]]; then
        echo "There is not config file at ${CONFIG:A}...Aborting!" 1>&2
        echo "Please create it. See github.com/hv15/sshprint for more information." 1>&2
        exit
    fi

    source "${CONFIG:A}"
}

function save_config()
{
    echo -e "USER=$USER\nSERVER=$SERVER\nPRINTERS=( $PRINTERS )\nDEFAULTP=$DEFAULTP" > "${CONFIG:A}"
}

function get_printer_list()
{
    tmp="$(ssh "$USER"@"$SERVER" "lpstat -a" | awk '{ print $1 }')"
    PRINTERS=(${=tmp})
}

function select_printer()
{
    local count=3
    local printern
    
    for (( i = 1; i < ${#PRINTERS}; i++)) do
        echo "[$i]: ${PRINTERS[$i]}";
    done

    while ((count > 0)); do
        read printern\?"Which printer would you like to print to? "

        if (($printern < 1 || $printern > ${#PRINTERS}-1)); then
            if (( count > 1 )); then
                echo "Invalid printer number given...try again..." 1>&2
            else
                echo "Invalid printer number given... no more retries for you!" 1>&2
            fi
        else
            break
        fi
        count=$count-1;
    done

    if ((count == 0)); then
        echo "That was naughty of you...Aborting!" 1>&2
        exit
    fi

    PRINTER="${PRINTERS[$printern]}"
}

function print_file()
{
    ssh "$USER@$SERVER" "lpr -P $PRINTER" < "${FILE:A}"
}

parse_args $*
load_config

if [ ${#PRINTERS} -eq 0 ]; then
    echo "You don't have a local copy of the printers list, retrieving..."
    get_printer_list
    
    read -rs -k 1 ans\?"Would you like to store the list in your config file? [Y/n]: "

    case "$ans" in
        y|Y|$'\n')
            save_config
            ;;
        *)
            ;;
    esac
fi

if [ -z "$PRINTER" ]; then
    if [ -z "$DEFAULTP" ]; then
        select_printer
    fi
    PRINTER="$DEFAULTP"
fi

print_file
