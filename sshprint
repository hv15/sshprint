#!/usr/bin/env zsh
# This is a little hackish script to print stuff to CUPS printers
# from anywhere ...
#
# Written by: Hans-Nikolai Viessmann (C) 2015
# License: MIT 
# Dependencies: zsh, lpr, lpstat, and awk (maybe some more...)

## MODULES ##
zmodload zsh/zutil
zmodload zsh/regex

## SCRIPT RUNTIME SETTINGS ##
set -e # exit on any failed command
setopt extended_glob

## VARIABLES ##
#-- Globals
typeset -A ARGS
typeset FILE
typeset -i NUMBER
typeset PRINTER
typeset LPROPTIONS
typeset -a PRINTERS
typeset -a FAVORITEP
#-- Constants
typeset -r VERSION="1.5.1-beta"
typeset -r DEBUG=false # activate debug mode
typeset -r CONFIG=~/.config/sshprint/config
typeset -r USAGE="$(basename "$0") [OPTIONS...] FILE\n   or: $(basename "$0") [OPTIONS...] --file FILE"
typeset -r HELP="Usage: $USAGE

Options:
  -h, --help              Print this help message and exit
  -V, --version           Print version and exit
  -r, --refresh-printers  Refresh list of printers in config  
  -p, --list-printers     Print a list of printers
  --file=FILE, FILE       File to be printed

Options passed to \`lpr':
  -P <printer_name>       Specify <printer_name> to print to
  -n copies               Specify number of copies
  -o option[=value],...   Set printer option(s)"

## HELPER FUNCTIONS ##

## FUNCTIONS ##
function parse_args()
{
    zparseopts -E -D -A ARGS -- h -help V -version r -refresh-printers p -list-printers D: P: -file: o: n:
    
    if [ "$DEBUG" = true ]; then
        echo "#FLAGS: ${(kv)ARGS}"
    fi

    if (( ${+ARGS[--help]} )); then
        echo -e "$HELP" 1>&2
        exit
    fi
    if (( ${+ARGS[-h]} )); then
        echo -e "Usage: $USAGE\n\nTry \`--help' for more details" 1>&2
        exit
    fi
    if (( ${+ARGS[-V]} || ${+ARGS[--version]} )); then
        echo "Version: ${VERSION}"
        exit
    fi
    if (( ${+ARGS[-r]} || ${+ARGS[--refresh]} )); then
        echo "Rereshing list..."
        load_config
        get_printer_list
        save_config
        exit
    fi
    if (( ${+ARGS[-p]} || ${+ARGS[--list-printers]} )); then
        load_config
        printf "%-8s  %-10s\n" "Favorite" "Name"
        for (( i = 1; i < ${#PRINTERS}; i++ )) do
            if (( ${+FAVORITEP[(r)${PRINTERS[$i]}]} )); then
                printf "%8s  %-10s\n" "*" "${PRINTERS[$i]}"
            else
                printf "%8s  %-10s\n" "" "${PRINTERS[$i]}"
            fi
        done
        exit
    fi
    if (( ${+ARGS[-P]} )); then
        PRINTER="${ARGS[-P]}"
    fi
    if (( ${+ARGS[-o]} )); then
        LPROPTIONS="-o ${ARGS[-o]//,/ -o }"
    fi
    if (( ${+ARGS[-n]} )); then
        NUMBER="${ARGS[-n]}"
    fi
    if (( ${+ARGS[--file]} )); then
        FILE="${ARGS[--file]}"
    elif (( $#@ > 0 )); then
        FILE="$1"
    else
        echo "Usage: $USAGE" 1>&2
        echo "You haven't specified a file to be printed...Aborting!" 1>&2
        exit
    fi

    if [[ ! -e "${FILE:A}" ]]; then
        echo "File ${FILE:A} does not exist...Aborting!" 1>&2
        exit
    fi
    return $t
}

function load_config()
{
    if [[ ! -e "${CONFIG:A}" ]]; then
        echo "There is not config file at ${CONFIG:A}...Aborting!" 1>&2
        echo "Please create it. See https://github.com/hv15/sshprint for more information." 1>&2
        exit
    fi

    source "${CONFIG:A}"
}

function save_config()
{
    echo -e "USER=$USER\nSERVER=$SERVER\nPRINTERS=( $PRINTERS )\nFAVORITEP=( $FAVORITEP )\nDEFAULTP=$DEFAULTP" > "${CONFIG:A}"
}

function get_printer_list()
{
    tmp="$(ssh "$USER"@"$SERVER" "lpstat -a" | awk '{ print $1 }')"
    PRINTERS=(${=tmp})
}

function set_favorite_printer()
{
    if [ $# -eq 0 ]; then
        echo "Function \`favorite_printer' used incorrectly, no argument given. Aborting..." 1>&2
        exit
    else
        if ! (( ${+FAVORITEP[(r)$1]} )); then
            FAVORITEP[2,3]=( ${FAVORITEP[1,2]} )
            FAVORITEP[1]="$1"
            save_config
        fi
    fi
}

function all_select_printer()
{
    local -i count=3
    local printern
    
    echo "Complete list of printers:"
    for (( i = 1; i <= ${#PRINTERS}; i++)) do
        echo "[$i]: ${PRINTERS[$i]}";
    done

    while (( count > 0 )); do
        read printern\?"Which printer would you like to print to? "

        case "$printern" in
            [1-9]##)
                if (( ${+PRINTERS[$printern]} )); then
                    break
                fi
                ;;
            *)
                if (( count > 1 )); then
                    echo "Invalid printer number given...try again..." 1>&2
                else
                    echo "Invalid printer number given... no more retries for you!" 1>&2
                fi
                ;;
        esac

        (( count-- ))
    done

    if (( count == 0 )); then
        echo "That was naughty of you...Aborting!" 1>&2
        exit
    fi

    PRINTER="${PRINTERS[$printern]}"
    set_favorite_printer "${PRINTER}"
}

function select_printer()
{
    local -i count=3
    local printern
    
    if [ ${#FAVORITEP} -eq 0 ]; then
        FAVORITEP=( ${PRINTERS[1,3]} )
    fi

    echo "Favorite printers:"
    for (( i = 1; i <= ${#FAVORITEP}; i++)) do
        echo "[$i]: ${FAVORITEP[$i]}";
    done
    
    while (( count > 0 )); do
        read printern\?"Which printer would you like to print to? [Default: 1] "
        
        case "$printern" in
            "")
                printern=1
                break
                ;;
            0)
                all_select_printer
                return
                ;;
            [1-${#FAVORITEP}])
                break
                ;;
            *)
                if (( count > 1 )); then
                    echo "Invalid printer number given...try again..." 1>&2
                else
                    echo "Invalid printer number given... no more retries for you!" 1>&2
                fi
                ;;
        esac

        (( count-- ))
    done

    if (( count == 0 )); then
        echo "That was naughty of you...Aborting!" 1>&2
        exit
    fi

    PRINTER="${FAVORITEP[$printern]}"
    set_favorite_printer "${PRINTER}"
}

function print_file()
{
    local ssh_remote="$USER@$SERVER"
    local ssh_command="\"lpr -P $PRINTER -#$NUMBER $LPROPTIONS\"" 
    if [ "$DEBUG" = false ]; then
        ssh "$USER@$SERVER" "lpr -P $PRINTER -#$NUMBER $LPROPTIONS" < "${FILE:A}" 
    else
        echo "$ssh_remote $ssh_command < ${FILE:A}"
    fi
}

#/  MAIN  /#

if [ "$DEBUG" = true ]; then
    echo "In DEBUG mode..." 1>&2
fi

parse_args $*
load_config

if [ ${#PRINTERS} -eq 0 ]; then
    echo "You don't have a local copy of the printers list, retrieving..."
    get_printer_list
    
    read -rs -k 1 ans\?"Would you like to store the list in your config file? [Y/n]: "

    case "$ans" in
        y|Y|$'\n')
            save_config
            ;;
        *)
            ;;
    esac
fi

if [ -z "$PRINTER" ]; then
    select_printer
fi

if [ "$NUMBER" -eq 0 ]; then
    NUMBER=1
fi

print_file
